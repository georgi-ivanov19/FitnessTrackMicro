@using FitnessTrackMicro.Services.TrackedWorkoutService;
@inject ITrackedWorkoutService TrackedWorkoutService;
@if (tracking)
{
    <RadzenIcon Icon="edit_note" class="d-inline" Style="vertical-align: sub;"></RadzenIcon>
    <RadzenText TextStyle="TextStyle.Subtitle1" class="d-inline"> Workout Notes</RadzenText>
}
else
{
    <RadzenIcon Icon="edit_note" class="d-inline" Style="vertical-align: sub;"></RadzenIcon>
    <RadzenText TextStyle="TextStyle.Subtitle1" class="d-inline"> Latest Notes (@FormatDate(workout.EndTime))</RadzenText>
}

<div class="w-50">
    <RadzenTextArea Rows="5" Disabled="@disabled" Value="@workout.Notes" Change=@(args => OnChange(args)) Class="w-100" Style="resize: none;" />
</div>

@code {
    [Parameter]
    public TrackedWorkout workout { get; set; } = new TrackedWorkout();
    [Parameter]
    public bool disabled { get; set; } = true; 
    [Parameter]
    public bool tracking { get; set; } = true;

    public void OnChange(string value)
    {
        workout.Notes = value;
        TrackedWorkoutService.UpdateTrackedWorkout(workout);
    }

    private static string FormatDate(DateTime? dt)
    {
        return dt == null ? "No Date" : ((DateTime)dt).ToString("MMM d, yyyy");
    }
}
