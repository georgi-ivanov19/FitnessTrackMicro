@using FitnessTrackMicro.Models;
@using FitnessTrackMicro.Services.WorkoutService;
@inject IWorkoutService WorkoutService;

<RadzenTemplateForm TItem="Workout" Data="@w" Submit="HandleSubmit">
    <div>
        <div class="m-2">
            <label for="name"> Name </label>
            <RadzenTextBox Name="Name" id="name" @bind-Value="w.Name" class="form-control"></RadzenTextBox>
            <RadzenRequiredValidator Component="Name" Text="Workout name is required" Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="dow"> Day of Week </label>
            <RadzenDropDown Name="DOW" id="dow" Data=@daysOfWeek @bind-Value="w.DayOfWeek" class="form-control"></RadzenDropDown>
            <RadzenRequiredValidator Component="DOW" Text="Field is required" Style="position: relative" />
        </div>
    </div>
    <br />
    <RadzenButton Shade="Radzen.Shade.Light" type="submit" ButtonStyle="Radzen.ButtonStyle.Primary">@btnText</RadzenButton>
</RadzenTemplateForm>


@code {
    [Parameter]
    public int? Id { get; set; }

    private string btnText = string.Empty;
    private Workout w = new Workout();
    private string[] daysOfWeek = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Confirm";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // Do nothing
        }
        else
        {
            await WorkoutService.GetSingleWorkout((int)Id);
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await WorkoutService.CreateWorkout(w);
        }
        else
        {
            await WorkoutService.UpdateWorkout(w, true);
        }
    }

    async Task DeleteWorkout()
    {
        await WorkoutService.DeleteWorkout(w.Id);
    }
}
