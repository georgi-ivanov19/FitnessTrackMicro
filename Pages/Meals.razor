@page "/meals"
@using FitnessTrackMicro.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using FitnessTrackMicro.Services.MealService;
@inject HttpClient Http;
@inject IMealService MealService
@inject NavigationManager NavManager
@inject Radzen.DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle> Meals </PageTitle>
<RadzenCard>
    @if (loading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="Radzen.ProgressBarMode.Indeterminate" />
    }
    else
    {
        <RadzenText TextStyle="TextStyle.H5" class="d-inline"> Meals </RadzenText>
        <RadzenButton Click=@(args => ShowForm(null, date)) Icon="add" Size="Radzen.ButtonSize.Medium" ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />
        <div class="container-fluid date-select text-center align-text-bottom mb-2 ">
            <RadzenButton Click=@(args => DateChanged("prev")) Icon="arrow_back_ios" Size="Radzen.ButtonSize.Small" ButtonStyle="Radzen.ButtonStyle.Light" Class="rz-border-radius-10 rz-shadow-6 m-1" />
            <RadzenText TextStyle="TextStyle.H5" class="d-inline"><RadzenIcon Icon="calendar_today" Style="font-size: 16px;" /> @date.ToString("ddd, dd MMM yyyy") </RadzenText>
            <RadzenButton Click=@(args => DateChanged("next")) Icon="arrow_forward_ios" Size="Radzen.ButtonSize.Small" ButtonStyle="Radzen.ButtonStyle.Light" Class="rz-border-radius-10 rz-shadow-6 m-1" />
        </div>

        <div class="container-fluid bars">
            <RadzenText TextStyle="TextStyle.Overline">Calories </RadzenText>
            <RadzenProgressBar ProgressBarStyle="Radzen.ProgressBarStyle.Secondary" Value=@MealService.CalculateMacros(dayMeals).Calories Max=@targets.Calories ShowValue="true" Mode="Radzen.ProgressBarMode.Determinate" />
            <RadzenText TextStyle="TextStyle.Overline"> @MealService.CalculateMacros(dayMeals).Calories / @targets.Calories</RadzenText>
            <br />
            <RadzenText TextStyle="TextStyle.Overline">Protein </RadzenText>
            <RadzenProgressBar ProgressBarStyle="Radzen.ProgressBarStyle.Info" Value=@MealService.CalculateMacros(dayMeals).Protein Max=@targets.Protein ShowValue="true" Mode="Radzen.ProgressBarMode.Determinate" />
            <RadzenText TextStyle="TextStyle.Overline"> @MealService.CalculateMacros(dayMeals).Protein / @targets.Protein</RadzenText>
            <br />
            <RadzenText TextStyle="TextStyle.Overline">Carbohydrates </RadzenText>
            <RadzenProgressBar ProgressBarStyle="Radzen.ProgressBarStyle.Success" Value=@MealService.CalculateMacros(dayMeals).Carbs Max=@targets.Carbs ShowValue="true" Mode="Radzen.ProgressBarMode.Determinate" />
            <RadzenText TextStyle="TextStyle.Overline"> @MealService.CalculateMacros(dayMeals).Carbs / @targets.Carbs</RadzenText>
            <br />
            <RadzenText TextStyle="TextStyle.Overline">Fats </RadzenText>
            <RadzenProgressBar ProgressBarStyle="Radzen.ProgressBarStyle.Warning" Value=@MealService.CalculateMacros(dayMeals).Fats Max=@targets.Fats ShowValue="true" Mode="Radzen.ProgressBarMode.Determinate" />
            <RadzenText TextStyle="TextStyle.Overline"> @MealService.CalculateMacros(dayMeals).Fats / @targets.Fats</RadzenText>
            <br />
        </div>

        @if (dayMeals.Count() != 0)
        {
            <div class="col-12 d-flex">
                <RadzenChart class="col-6">
                    <RadzenLegend Visible="false" />
                    <RadzenDonutSeries Data="@dayMeals" CategoryProperty="Category" ValueProperty="TotalCalories" TItem="Meal">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Calories</div>
                            </div>
                        </TitleTemplate>
                        <TooltipTemplate Context="data">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline"> @($"{data.Category} - {@data.TotalCalories}kcals")</RadzenText>
                            </TooltipTemplate>
                        </RadzenDonutSeries>
                    </RadzenChart>
                    <RadzenChart class="col-6">
                        <RadzenLegend Visible="false" />
                        <RadzenDonutSeries Data="@dayMeals" CategoryProperty="Category" ValueProperty="Protein" TItem="Meal">
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>Protein</div>
                                </div>
                            </TitleTemplate>
                            <TooltipTemplate Context="data">
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline"> @($"{data.Category} - {@data.Protein}g")</RadzenText>
                            </TooltipTemplate>
                        </RadzenDonutSeries>
                    </RadzenChart>
                </div>
            <div class="col-12 d-flex">
                <RadzenChart class="col-6">
                    <RadzenLegend Visible="false" />
                    <RadzenDonutSeries Data="@dayMeals" CategoryProperty="Category" ValueProperty="Carbohydrates" TItem="Meal">
                        <TitleTemplate>
                            <div class="rz-donut-content">
                                <div>Carbohydrates</div>
                            </div>
                        </TitleTemplate>
                        <TooltipTemplate Context="data">
                            <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline"> @($"{data.Category} - {@data.Carbohydrates}g")</RadzenText>
                            </TooltipTemplate>
                        </RadzenDonutSeries>
                    </RadzenChart>

                    <RadzenChart class="col-6">
                        <RadzenLegend Visible="false" />
                        <RadzenDonutSeries Data="@dayMeals" CategoryProperty="Category" ValueProperty="Fats" TItem="Meal">
                            <TitleTemplate>
                                <div class="rz-donut-content">
                                    <div>Fats</div>
                                </div>
                            </TitleTemplate>
                            <TooltipTemplate Context="data">
                                <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline"> @($"{data.Category} - {@data.Fats}g")</RadzenText>
                            </TooltipTemplate>
                        </RadzenDonutSeries>
                    </RadzenChart>
                </div>
        }

        <RadzenTree>
            @if (dayMeals.Where(m => m.Category == "Breakfast").Count() > 0)
            {
                <RadzenTreeItem Text="Breakfast">
                    <ChildContent>
                        @foreach (var meal in dayMeals.Where(m => m.Category == "Breakfast"))
                        {
                            <RadzenTreeItem>
                                <Template>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline">
                                        @($"Calories: {meal.TotalCalories}kcals | Protein: {meal.Protein}g | Carbohydrates: {meal.Carbohydrates}g | Fats: {meal.Fats}g")

                                    </RadzenText>
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(meal.Id, meal.Date)) Icon="edit" ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteMeal(meal.Id)) Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                </Template>
                            </RadzenTreeItem>
                        }
                    </ChildContent>
                    <Template>
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="d-inline"> Breakfast </RadzenText>
                    </Template>
                </RadzenTreeItem>
            }
            @if (dayMeals.Where(m => m.Category == "Lunch").Count() > 0)
            {
                <RadzenTreeItem Text="Lunch">
                    <ChildContent>
                        @foreach (var meal in dayMeals.Where(m => m.Category == "Lunch"))
                        {
                            <RadzenTreeItem>
                                <Template>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline">
                                        @(
                                            $"Calories: {meal.TotalCalories}kcals | Protein: {meal.Protein}g | Carbohydrates: {meal.Carbohydrates}g | Fats: {meal.Fats}g"
                                            )
                                    </RadzenText>
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(meal.Id, meal.Date)) Icon="edit" ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteMeal(meal.Id)) Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                </Template>
                            </RadzenTreeItem>
                        }
                    </ChildContent>
                    <Template>
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="d-inline"> Lunch </RadzenText>
                    </Template>
                </RadzenTreeItem>
            }
            @if (dayMeals.Where(m => m.Category == "Dinner").Count() > 0)
            {
                <RadzenTreeItem Text="Dinner">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="d-inline"> Dinner </RadzenText>
                    </Template>
                    <ChildContent>
                        @foreach (var meal in dayMeals.Where(m => m.Category == "Dinner"))
                        {
                            <RadzenTreeItem>
                                <Template>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="d-inline">
                                        @(
                                            $"Calories: {meal.TotalCalories}kcals | Protein: {meal.Protein}g | Carbohydrates: {meal.Carbohydrates}g | Fats: {meal.Fats}g"
                                            )
                                    </RadzenText>
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(meal.Id, meal.Date)) Icon="edit" ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteMeal(meal.Id)) Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                </Template>
                            </RadzenTreeItem>
                        }
                    </ChildContent>
                </RadzenTreeItem>
            }
            @if (dayMeals.Where(m => m.Category == "Snack").Count() > 0)
            {
                <RadzenTreeItem Text="Snacks">
                    <Template>
                        <RadzenText TextStyle="TextStyle.Subtitle1" class="d-inline"> Snacks </RadzenText>
                    </Template>
                    <ChildContent>
                        @foreach (var meal in dayMeals.Where(m => m.Category == "Snack"))
                        {
                            <RadzenTreeItem>
                                <Template>
                                    <RadzenText TextStyle="TextStyle.Subtitle2" class="d-flex">
                                        @(
                                            $"Calories: {meal.TotalCalories}kcals | Protein: {meal.Protein}g | Carbohydrates: {meal.Carbohydrates}g | Fats: {meal.Fats}g"
                                            )
                                    </RadzenText>
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(meal.Id, meal.Date)) Icon="edit" ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteMeal(meal.Id)) Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" class="mb-2" />
                                </Template>
                            </RadzenTreeItem>

                        }
                    </ChildContent>
                </RadzenTreeItem>
            }
        </RadzenTree>
    }
</RadzenCard>

@code {
    private MealMacros targets = new MealMacros(2000, 140, 200, 80);
    private IEnumerable<Meal> dayMeals = new List<Meal>();
    private bool loading = true;
    private DateTime date = DateTime.Today;
    string? userId = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userId = authenticationState.User.FindFirst(c => c.Type == "sub")?.Value;
            if (userId != null)
            {
            await MealService.GetMeals(userId);
            dayMeals = MealService.Meals.Where(m => m.Date.Date == date.Date).ToList();
            date = DateTime.Today;
            loading = false;    }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ShowForm(int? id, DateTime date)
    {
        var title = id == null ? "Add Meal" : "Edit Meal";
        await DialogService.OpenAsync<MealForm>(title,
        new Dictionary<string, object>() { { "Id", id }, { "Date", date }, {"UserId", userId} },
        new Radzen.DialogOptions()
            {
                Width = "512px",
                Resizable = true,
                Draggable = true,
                CloseDialogOnOverlayClick = true
            }
        );
        dayMeals = MealService.Meals.Where(m => m.Date == date.Date).ToList();
    }

    private async Task DeleteMeal(int id)
    {
        await MealService.DeleteMeal(id);
        Console.WriteLine($"Deleting meal {id}");
        dayMeals = MealService.Meals.Where(m => m.Date.Date == date.Date).ToList();
    }

    private void DateChanged(string p1)
    {
        date = p1 == "next" ? date.AddDays(1) : date.AddDays(-1);
        dayMeals = MealService.Meals.Where(m => m.Date.Date == date.Date).ToList();
    }
}
