@page "/measurements"
@using FitnessTrackMicro.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using FitnessTrackMicro.Services.MeasurementsService;
@inject HttpClient Http;
@inject IMeasurementsService MeasurementService
@inject NavigationManager NavManager
@inject Radzen.DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle> Measurements </PageTitle>

@if (loading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="Radzen.ProgressBarMode.Indeterminate" />
}
else
{
    <RadzenCard class="m-2">
        <RadzenTabs @bind-SelectedIndex=@selectedIndex>
            <Tabs>
                @foreach (var type in measurementTypes)
                {
                    <RadzenTabsItem Text=@type>
                        @if (measurementsByType(type).Count() == 0)
                        {
                            <RadzenChart>
                                <RadzenLegend Visible="false" />
                                <RadzenText TextStyle="TextStyle.H5" class="d-inline">
                                    No entries for this measurement type
                                </RadzenText>
                                <RadzenButton Click=@(args => ShowForm(null, type)) Icon="add" Size="Radzen.ButtonSize.Medium"
                        ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />
                            </RadzenChart>
                        }
                        else
                        {
                            <RadzenChart class="mb-5">
                                <RadzenLegend Visible="false" />
                                <RadzenLineSeries Smooth="false" Data="measurementsByType(type)" CategoryProperty="Date" Title=@type
                        ValueProperty="Value">
                                    <ChildContent>
                                        <RadzenMarkers MarkerType="MarkerType.Circle" Fill="#874EFE" StrokeWidth="1" Size="6" />
                                        <RadzenSeriesDataLabels />
                                    </ChildContent>
                                </RadzenLineSeries>
                            </RadzenChart>
                            <RadzenText TextStyle="TextStyle.H5" class="d-inline"> Entries </RadzenText>
                            <RadzenButton Click=@(args => ShowForm(null, type)) Icon="add" Size="Radzen.ButtonSize.Medium"
                    ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />

                            <RadzenDataList WrapItems="false" AllowPaging="true" PageSize="5" Data="measurementsByType(type)"
                    TItem="Measurement">
                                <Template Context="measurement">
                                    <RadzenIcon Icon="calendar_today" Style="font-size: 16px" />
                                    <b>@measurement.Date.ToString("dd MMM yyyy")</b> -
                                    <span><b> @measurement.Value</b>@measurement.Unit </span>
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(measurement.Id))
                            Icon="edit" ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small"
                            class="mb-2" />
                                    <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteMeasurement(measurement.Id))
                            Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete"
                            Size="Radzen.ButtonSize.Small" class="mb-2" />
                                </Template>
                            </RadzenDataList>
                        }
                    </RadzenTabsItem>
                }
            </Tabs>
        </RadzenTabs>
    </RadzenCard>
}
@code {
    private string[] measurementTypes = { "Weight", "Waist", "Body fat" };
    string? userId = null;
    int selectedIndex = 0;
    private IEnumerable<Measurement> weightMeasurements = new List<Measurement>();
    private IEnumerable<Measurement> bodyFatMeasurements = new List<Measurement>();

    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userId = authenticationState.User.FindFirst(c => c.Type == "sub")?.Value;
            if (userId != null)
            {
                await MeasurementService.GetMeasurements(userId);
                loading = false;
            }

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    private IEnumerable<Measurement> measurementsByType(string type)
    {
        return MeasurementService.GetMeasurementsByType(type);
    }

    private async Task ShowForm(int? id, string? type = null)
    {
        var title = id == null ? "Add Measurement" : "Edit Measurement";
        await DialogService.OpenAsync<MeasurementForm>(title,
        new Dictionary<string, object>() { { "Id", id }, { "DefaultType", type }, { "UserId", userId } },
        new Radzen.DialogOptions()
        {
            Width = "512px",
            Resizable = true,
            Draggable = true,
            CloseDialogOnOverlayClick = true
        }
        );
    }
    private async Task DeleteMeasurement(int id)
    {
        Console.WriteLine($"Deleting measurement {id}");
        await MeasurementService.DeleteMeasurement(id);
    }
}
