@page "/workout/{id:int}"

@using FitnessTrackMicro.Models;
@using FitnessTrackMicro.Services.WorkoutService;
@using FitnessTrackMicro.Services.ExerciseService;
@using FitnessTrackMicro.Services.ExerciseSetService;
@using FitnessTrackMicro.Services.TrackedWorkoutService;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

@inject Radzen.DialogService DialogService;
@inject IWorkoutService WorkoutService;
@inject IExerciseService ExerciseService;
@inject IExerciseSetService ExerciseSetService;
@inject ITrackedWorkoutService TrackedWorkoutService;
@inject NavigationManager NavManager;

<PageTitle> @workout.Name </PageTitle>
<RadzenCard>
    <RadzenText TextStyle="TextStyle.H5" class="d-inline me-1"> @workout.Name </RadzenText>
    <RadzenButton Click=@(args => StartWorkout(workout)) Icon="play_arrow" Size="Radzen.ButtonSize.Medium" ButtonStyle="Radzen.ButtonStyle.Success" Class="rz-border-radius-10 rz-shadow-6" />
    @if (trackedWorkouts.Count == 0)
    {
        <RadzenText TextStyle="TextStyle.H5" class="my-3">
            No competed @workout.Name workouts yet.
        </RadzenText>
    }
    else
    {
        <RadzenChart class="mb-5">
            <RadzenLegend Visible="false" />
            <RadzenLineSeries Smooth="false" Data="trackedWorkouts" CategoryProperty="EndTime" Title="TotalVolume"
                          ValueProperty="TotalVolume">
                <ChildContent>
                    <RadzenMarkers MarkerType="MarkerType.Circle" Fill="#874EFE" StrokeWidth="1" Size="6" />
                    <RadzenSeriesDataLabels />
                </ChildContent>
            </RadzenLineSeries>
        </RadzenChart>
    }
    @if (latestCompleted != null)
    {
        <div class="summary m-2">
            <WorkoutSummary workout="@latestCompleted" parentWorkout="@workout" />
        </div>
    }
    <div class="exercises mt-2">
        <RadzenText TextStyle="TextStyle.H5" class="d-inline me-1"> Exercises </RadzenText>
        <RadzenButton Click=@(args => ShowForm(null)) Icon="add" Size="Radzen.ButtonSize.Medium" ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />
        <RadzenDataList WrapItems="false" AllowPaging="true" Data="ExerciseService.Exercises"
                        TItem="Exercise">
            <Template Context="exercise">
                <RadzenText class="d-inline">@exercise.Name</RadzenText>
                <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(exercise.Id)) Icon="edit"
                              ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" />
                <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteExercise(exercise.Id)) Icon="delete"
                              ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" />
            </Template>
        </RadzenDataList>
    </div>
</RadzenCard>


@code {

    [Parameter]
    public int Id { get; set; }

    Workout workout = new Workout();
    List<TrackedWorkout> trackedWorkouts = new List<TrackedWorkout>();
    TrackedWorkout? latestCompleted;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            workout = await WorkoutService.GetSingleWorkout(Id);
            if (workout.TrackedWorkouts.Any())
            {
                trackedWorkouts = workout.TrackedWorkouts.Where(tw => tw.IsCompleted == true).ToList();
                if(trackedWorkouts.Count > 0)
                    latestCompleted = trackedWorkouts.OrderByDescending(w => w.EndTime).First();
            }
            await ExerciseService.GetExercises(Id);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void StartWorkout(Workout w)
    {
        var tw = await TrackedWorkoutService.StartWorkout(w);
        await ExerciseSetService.CreateExerciseSetRange(w, tw);
        Console.WriteLine($"should navigate to track/some id");
        NavManager.NavigateTo($"track/{tw.Id}");
    }

    private async Task ShowForm(int? id)
    {
        var title = id == null ? "Add Exercise" : "Edit Exercise";
        await DialogService.OpenAsync<ExerciseForm>(title,
        new Dictionary<string, object>() { { "Id", id }, { "WorkoutId", workout.Id } },
        new Radzen.DialogOptions()
            {
                Width = "512px",
                Draggable = true,
                CloseDialogOnOverlayClick = true
            }
        );
    }

    private async Task DeleteExercise(int id)
    {
        await ExerciseService.DeleteExercise(id);
    }
}
