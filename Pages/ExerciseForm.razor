@using FitnessTrackMicro.Models;
@using FitnessTrackMicro.Services.ExerciseService;
@inject IExerciseService ExerciseService;

<RadzenTemplateForm TItem="Exercise" Data="@e" Submit="HandleSubmit">
    <div>
        <div class="m-2">
            <label for="name"> Name </label>
            <RadzenTextBox Name="Name" id="name" @bind-Value="e.Name" class="form-control"></RadzenTextBox>
            <RadzenRequiredValidator Component="Name" Text="Exercise name is required" Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="target-muscle"> Target Muscle </label>
            <RadzenTextBox Name="TargetMuscle" id="target-muscle" @bind-Value="e.TargetMuscle" class="form-control">
            </RadzenTextBox>
            <RadzenRequiredValidator Component="TargetMuscle" Text="Target Muscle is required"
                Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="sets-num"> Number of sets </label>
            <RadzenNumeric Name="Sets" id="sets-num" @bind-Value="e.DefaultNumberOfSets" class="form-control ms-2"
                Style="width: 60px;"></RadzenNumeric>
            <RadzenNumericRangeValidator Component="Sets" Min="0.01" Text="Value must be bigger than 0"
                Style="position: relative; display: block;" />
        </div>
    </div>
    <br />
    <RadzenButton Shade="Radzen.Shade.Light" type="submit" ButtonStyle="Radzen.ButtonStyle.Primary">@btnText
    </RadzenButton>
</RadzenTemplateForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public int WorkoutId { get; set; }

    private string btnText = string.Empty;
    private Exercise e = new Exercise();


    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Add" : "Confirm";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // TODO:
            e.WorkoutId = WorkoutId;
        }
        else
        {
            e = await ExerciseService.GetSingleExercise((int)Id);
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await ExerciseService.CreateExercise(e);
        }
        else
        {
            await ExerciseService.UpdateExercise(e);
        }
    }

    async Task DeleteExercise()
    {
        await ExerciseService.DeleteExercise(e.Id);
    }
}