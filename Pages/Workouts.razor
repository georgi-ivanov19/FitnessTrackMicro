@page "/workouts"
@using FitnessTrackMicro.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using FitnessTrackMicro.Services.WorkoutService;
@using FitnessTrackMicro.Services.TrackedWorkoutService;
@using FitnessTrackMicro.Services.ExerciseSetService
@inject HttpClient Http;
@inject NavigationManager NavManager
@inject IWorkoutService WorkoutService;
@inject ITrackedWorkoutService TrackedWorkoutService;
@inject IExerciseSetService ExerciseSetService;
@inject NavigationManager NavManager;
@inject Radzen.DialogService DialogService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<RadzenCard>
    @if (loading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="Radzen.ProgressBarMode.Indeterminate" />
    }
    else
    {
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.DisplayH5" class="d-inline"> Upcoming workouts </RadzenText>
            <RadzenRow>
                @foreach (var item in WorkoutService.UpcomingWorkouts())
                {
                    var nextDate = nextDateForDayOfWeek(item.DayOfWeek);
                    <RadzenColumn>
                        <span class="d-inline workout-data-item p-2" @onclick=@(args =>
                    NavManager.NavigateTo($"workout/{item.Id}"))>
                            <RadzenText class="d-inline">@item.Name</RadzenText>
                        </span>
                        -
                        <RadzenText class="d-inline p-2">@nextDate</RadzenText>
                        @if (nextDate.EndsWith("Today)"))
                        {
                            <RadzenButton class="p-2" Variant="Radzen.Variant.Text" Click=@(args => StartWorkout(item))
                    Icon="play_circle_filled" ButtonStyle="Radzen.ButtonStyle.Success" Text="Start"
                    Size="Radzen.ButtonSize.Small" />
                        }
                    </RadzenColumn>
                }
            </RadzenRow>
        </div>

        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.DisplayH5" class="d-inline"> Workouts </RadzenText>
            <RadzenButton Click=@(args => ShowForm(null)) Icon="add" Size="Radzen.ButtonSize.Medium"
            ButtonStyle="Radzen.ButtonStyle.Primary" Class="rz-border-radius-10 rz-shadow-6" />
        </div>
        <RadzenDataList WrapItems="false" AllowPaging="true" Data="WorkoutService.Workouts" TItem="Workout">
            <Template Context="workout">
                <div class="d-inline workout-data-item p-2" @onclick=@(args =>
                NavManager.NavigateTo($"workout/{workout.Id}"))>
                    <RadzenText class="d-inline">@workout.Name</RadzenText>
                </div>
                <RadzenButton class="p-2" Variant="Radzen.Variant.Text" Click=@(args => StartWorkout(workout))
                Icon="play_circle_filled" ButtonStyle="Radzen.ButtonStyle.Success" Text="Start"
                Size="Radzen.ButtonSize.Small" />

                <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => ShowForm(workout.Id)) Icon="edit"
                ButtonStyle="Radzen.ButtonStyle.Info" Text="Edit" Size="Radzen.ButtonSize.Small" />

                <RadzenButton Variant="Radzen.Variant.Text" Click=@(args => DeleteWorkout(workout.Id)) Icon="delete"
                ButtonStyle="Radzen.ButtonStyle.Danger" Text="Delete" Size="Radzen.ButtonSize.Small" />

            </Template>
        </RadzenDataList>
    }
</RadzenCard>

@code {
    bool loading = true;
    string? userId = null;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            userId = authenticationState.User.FindFirst(c => c.Type == "sub")?.Value;
            if (userId != null)
            {
                await WorkoutService.GetWorkouts(userId);
            }
            loading = false;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task ShowForm(int? id)
    {
        var title = id == null ? "Add Workout" : "Edit Workout";
        await DialogService.OpenAsync<WorkoutsForm>(title,
        new Dictionary<string, object>() { { "Id", id }, { "UserId", userId } },
        new Radzen.DialogOptions()
        {
            Width = "512px",
            Draggable = true,
            CloseDialogOnOverlayClick = true
        }
        );
    }

    private string nextDateForDayOfWeek(string dayOfWeek)
    {
        var day = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), dayOfWeek);
        var today = DateTime.Today;
        var daysToAdd = (day - today.DayOfWeek + 7) % 7;
        var daysBetween = (today.AddDays(daysToAdd) - today).Days;
        string daysUntil = string.Empty;
        switch (daysBetween)
        {
            case 0:
                daysUntil = "Today";
                break;
            case 1:
                daysUntil = "Tomorrow";
                break;
            default:
                daysUntil = $"in {daysBetween} days";
                break;

        }
        return $"{today.AddDays(daysToAdd).ToString("dddd, dd MMM")} ({daysUntil})";
    }

    private async Task DeleteWorkout(int id)
    {
        await WorkoutService.DeleteWorkout(id);
    }

    private async void StartWorkout(Workout w)
    {
        if (w.Exercises.Any())
        {
            var tw = await TrackedWorkoutService.StartWorkout(w);
            await ExerciseSetService.CreateExerciseSetRange(w, tw);
            NavManager.NavigateTo($"track/{tw.Id}");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Cannot start a workout with no exercises"); // Alert
        }
    }
}
