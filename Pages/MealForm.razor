@using FitnessTrackMicro.Models;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using FitnessTrackMicro.Services.MealService;
@inject IMealService MealService;
@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenTemplateForm TItem="Meal" Data="@m" Submit="HandleSubmit">
    <div>
        <div class="m-2">
            <label for="category"> Category </label>
            <RadzenDropDown Name="Category" id="category" Data=@mealTypes @bind-Value="m.Category" class="form-control">
            </RadzenDropDown>
            <RadzenRequiredValidator Component="Category" Text="Meal category is required" Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="totalCals"> Total Calories </label>
            <RadzenNumeric id="totalCals" Name="Calories" @bind-Value="m.TotalCalories" class="form-control">
            </RadzenNumeric>
            <RadzenNumericRangeValidator Component="Calories" Min="0.01" Text="Value must be bigger than 0"
                Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="carbs"> Carbohydrates </label>
            <RadzenNumeric id="carbs" Name="Carbohydrates" @bind-Value="m.Carbohydrates" class="form-control">
            </RadzenNumeric>
            <RadzenNumericRangeValidator Component="Carbohydrates" Min="0.01" Text="Value must be bigger than 0"
                Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="protein"> Protein </label>
            <RadzenNumeric id="protein" Name="ProteinProtein" @bind-Value="m.Protein" class="form-control">
            </RadzenNumeric>
            <RadzenNumericRangeValidator Component="Carbohydrates" Min="0.01" Text="Value must be bigger than 0"
                Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="fats"> Fats </label>
            <RadzenNumeric id="fats" Name="Fats" @bind-Value="m.Fats" class="form-control"></RadzenNumeric>
            <RadzenNumericRangeValidator Component="Fats" Min="0.01" Text="Value must be bigger than 0"
                Style="position: relative" />
        </div>
        <div class="m-2">
            <label for="date"> Date </label>
            <RadzenDatePicker TValue="DateTime" Name="mDate" id="date" @bind-Value="m.Date" class="w-100">
            </RadzenDatePicker>
            <RadzenRequiredValidator Component="mDate" Text="Value is required" Style="position: relative" />
        </div>
    </div>
    <br />
    <RadzenButton Shade="Radzen.Shade.Light" type="submit" ButtonStyle="Radzen.ButtonStyle.Primary">@btnText
    </RadzenButton>
</RadzenTemplateForm>


@code {
    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public DateTime? Date { get; set; }
    private string[] mealTypes = { "Breakfast", "Lunch", "Dinner", "Snack" };
    private string btnText = string.Empty;
    private Meal m = new Meal();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Confirm";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            m.Date = Date ?? DateTime.Today;
            m.Id = Guid.NewGuid().ToString();
        }
        else
        {
            m = await MealService.GetSingleMeal(Id);
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            m.ApplicationUserId = authenticationState.User.FindFirst(c => c.Type == "sub")?.Value;
            await MealService.CreateMeal(m);
        }
        else
        {
            await MealService.UpdateMeal(m);
        }
    }

    async Task DeleteHero()
    {
        await MealService.DeleteMeal(m.Id);
    }
}
