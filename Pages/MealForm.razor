@using FitnessTrackMicro.Models;
@using FitnessTrackMicro.Services.MealService;
@inject IMealService MealService;

<EditForm Model="m" OnSubmit="HandleSubmit">
    <div>
        <label for="category"> Category </label>
        <InputSelect @bind-Value="m.Category" class="form-control">
            <option value="Breakfast">Breakfast</option>
            <option value="Lunch">Lunch</option>
            <option value="Dinner">Dinner</option>
            <option value="Snack">Snack</option>
        </InputSelect>
        <label for="totalCals"> Total Calories </label>
        <InputNumber id="totalCals" @bind-Value="m.TotalCalories" class="form-control"></InputNumber>
        <label for="carbs"> Carbohydrates </label>
        <InputNumber id="carbs" @bind-Value="m.Carbohydrates" class="form-control"></InputNumber>
        <label for="protein"> Protein </label>
        <InputNumber id="protein" @bind-Value="m.Protein" class="form-control"></InputNumber>
        <label for="fats"> Fats </label>
        <InputNumber id="fats" @bind-Value="m.Fats" class="form-control"></InputNumber>
        <label for="date"> Date </label>
        <InputDate id="date" @bind-Value="m.Date" class="form-control"></InputDate>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public DateTime? Date { get; set; }

    private string btnText = string.Empty;
    private Meal m = new Meal();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create" : "Confirm";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            m.Date = Date ?? DateTime.Today;
        }
        else
        {
            await MealService.GetSingleMeal((int)Id);
        }

    }
    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await MealService.CreateMeal(m);
        }
        else
        {
            await MealService.UpdateMeal(m);
        }
    }

    async Task DeleteHero()
    {
        await MealService.DeleteMeal(m.Id);
    }
}
